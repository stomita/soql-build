"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _Condition2 = _interopRequireDefault(require("./Condition"));
var _Operand = require("./Operand");
var _buildField = _interopRequireDefault(require("./buildField"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/**
 *
 */
var SingleCondition = exports["default"] = /*#__PURE__*/function (_Condition) {
  _inherits(SingleCondition, _Condition);
  var _super = _createSuper(SingleCondition);
  /**
   *
   */
  function SingleCondition(config, baseObjectName) {
    var _this;
    _classCallCheck(this, SingleCondition);
    _this = _super.call(this);
    _this.operator = config.operator;
    _this.field = (0, _buildField["default"])(config.field, baseObjectName);
    var value = (0, _Operand.createOperand)(config.value);
    if (value == null) {
      throw new Error();
    }
    _this.value = value;
    return _this;
  }

  /**
   *
   */
  _createClass(SingleCondition, [{
    key: "toSOQL",
    value: function toSOQL() {
      return this.field.toSOQL() + " " + this.operator + " " + this.value.toSOQL();
    }
  }]);
  return SingleCondition;
}(_Condition2["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ29uZGl0aW9uMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX09wZXJhbmQiLCJfYnVpbGRGaWVsZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiTnVtYmVyIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJiaW5kIiwiX19wcm90b19fIiwiX2NyZWF0ZVN1cGVyIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2NyZWF0ZVN1cGVySW50ZXJuYWwiLCJTdXBlciIsIl9nZXRQcm90b3R5cGVPZiIsInJlc3VsdCIsIk5ld1RhcmdldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJ2YWx1ZU9mIiwiZSIsImdldFByb3RvdHlwZU9mIiwiU2luZ2xlQ29uZGl0aW9uIiwiZXhwb3J0cyIsIl9Db25kaXRpb24iLCJfc3VwZXIiLCJjb25maWciLCJiYXNlT2JqZWN0TmFtZSIsIl90aGlzIiwib3BlcmF0b3IiLCJmaWVsZCIsImJ1aWxkRmllbGQiLCJjcmVhdGVPcGVyYW5kIiwiRXJyb3IiLCJ0b1NPUUwiLCJDb25kaXRpb24iXSwic291cmNlcyI6WyIuLi9zcmMvU2luZ2xlQ29uZGl0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGVlcFJlYWRvbmx5IH0gZnJvbSBcInRzLWVzc2VudGlhbHNcIjtcbmltcG9ydCBGaWVsZCBmcm9tIFwiLi9GaWVsZFwiO1xuaW1wb3J0IENvbmRpdGlvbiwgeyB0eXBlIFNpbmdsZUNvbmRpdGlvbkNvbmZpZyB9IGZyb20gXCIuL0NvbmRpdGlvblwiO1xuaW1wb3J0IE9wZXJhbmQsIHsgY3JlYXRlT3BlcmFuZCB9IGZyb20gXCIuL09wZXJhbmRcIjtcbmltcG9ydCBidWlsZEZpZWxkIGZyb20gXCIuL2J1aWxkRmllbGRcIjtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaW5nbGVDb25kaXRpb24gZXh0ZW5kcyBDb25kaXRpb24ge1xuICBvcGVyYXRvcjogc3RyaW5nO1xuICBmaWVsZDogRmllbGQ7XG4gIHZhbHVlOiBPcGVyYW5kO1xuXG4gIC8qKlxuICAgKlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgY29uZmlnOiBEZWVwUmVhZG9ubHk8U2luZ2xlQ29uZGl0aW9uQ29uZmlnPixcbiAgICBiYXNlT2JqZWN0TmFtZTogc3RyaW5nLFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3BlcmF0b3IgPSBjb25maWcub3BlcmF0b3I7XG4gICAgdGhpcy5maWVsZCA9IGJ1aWxkRmllbGQoY29uZmlnLmZpZWxkLCBiYXNlT2JqZWN0TmFtZSk7XG4gICAgY29uc3QgdmFsdWUgPSBjcmVhdGVPcGVyYW5kKGNvbmZpZy52YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgIH1cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHRvU09RTCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5maWVsZC50b1NPUUwoKSArIFwiIFwiICsgdGhpcy5vcGVyYXRvciArIFwiIFwiICsgdGhpcy52YWx1ZS50b1NPUUwoKVxuICAgICk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBLElBQUFBLFdBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFdBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFzQyxTQUFBRCx1QkFBQUksR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsZ0JBQUFDLFFBQUEsRUFBQUMsV0FBQSxVQUFBRCxRQUFBLFlBQUFDLFdBQUEsZUFBQUMsU0FBQTtBQUFBLFNBQUFDLGtCQUFBQyxNQUFBLEVBQUFDLEtBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFELEtBQUEsQ0FBQUUsTUFBQSxFQUFBRCxDQUFBLFVBQUFFLFVBQUEsR0FBQUgsS0FBQSxDQUFBQyxDQUFBLEdBQUFFLFVBQUEsQ0FBQUMsVUFBQSxHQUFBRCxVQUFBLENBQUFDLFVBQUEsV0FBQUQsVUFBQSxDQUFBRSxZQUFBLHdCQUFBRixVQUFBLEVBQUFBLFVBQUEsQ0FBQUcsUUFBQSxTQUFBQyxNQUFBLENBQUFDLGNBQUEsQ0FBQVQsTUFBQSxFQUFBVSxjQUFBLENBQUFOLFVBQUEsQ0FBQU8sR0FBQSxHQUFBUCxVQUFBO0FBQUEsU0FBQVEsYUFBQWYsV0FBQSxFQUFBZ0IsVUFBQSxFQUFBQyxXQUFBLFFBQUFE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