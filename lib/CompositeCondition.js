"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _Condition2 = _interopRequireDefault(require("./Condition"));
var _buildCondition = _interopRequireDefault(require("./buildCondition"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/**
 *
 */
var CompositeCondition = exports["default"] = /*#__PURE__*/function (_Condition) {
  _inherits(CompositeCondition, _Condition);
  var _super = _createSuper(CompositeCondition);
  /**
   *
   */
  function CompositeCondition(config, baseObjectName) {
    var _this;
    var stripParens = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    _classCallCheck(this, CompositeCondition);
    _this = _super.call(this);
    _this.operator = config.operator;
    _this.conditions = config.conditions.map(function (cond) {
      return (0, _buildCondition["default"])(cond, baseObjectName, false);
    });
    _this.stripParens = stripParens;
    return _this;
  }

  /**
   *
   */
  _createClass(CompositeCondition, [{
    key: "toSOQL",
    value: function toSOQL() {
      var condition = this.conditions.map(function (c) {
        return c.toSOQL();
      }).join(" " + this.operator + " ");
      return condition.length > 0 && !this.stripParens ? "(" + condition + ")" : condition;
    }
  }]);
  return CompositeCondition;
}(_Condition2["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ29uZGl0aW9uMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2J1aWxkQ29uZGl0aW9uIiwib2JqIiwiX19lc01vZHVsZSIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiX3R5cGVvZiIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJOdW1iZXIiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiZ2V0UHJvdG90eXBlT2YiLCJDb21wb3NpdGVDb25kaXRpb24iLCJleHBvcnRzIiwiX0NvbmRpdGlvbiIsIl9zdXBlciIsImNvbmZpZyIsImJhc2VPYmplY3ROYW1lIiwiX3RoaXMiLCJzdHJpcFBhcmVucyIsIm9wZXJhdG9yIiwiY29uZGl0aW9ucyIsIm1hcCIsImNvbmQiLCJidWlsZENvbmRpdGlvbiIsInRvU09RTCIsImNvbmRpdGlvbiIsImMiLCJqb2luIiwiQ29uZGl0aW9uIl0sInNvdXJjZXMiOlsiLi4vc3JjL0NvbXBvc2l0ZUNvbmRpdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERlZXBSZWFkb25seSB9IGZyb20gXCJ0cy1lc3NlbnRpYWxzXCI7XG5pbXBvcnQgQ29uZGl0aW9uIGZyb20gXCIuL0NvbmRpdGlvblwiO1xuaW1wb3J0IGJ1aWxkQ29uZGl0aW9uIGZyb20gXCIuL2J1aWxkQ29uZGl0aW9uXCI7XG5pbXBvcnQgdHlwZSB7IENvbXBvc2l0ZUNvbmRpdGlvbkNvbmZpZyB9IGZyb20gXCIuL0NvbmRpdGlvblwiO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvc2l0ZUNvbmRpdGlvbiBleHRlbmRzIENvbmRpdGlvbiB7XG4gIG9wZXJhdG9yOiBcIkFORFwiIHwgXCJPUlwiO1xuICBjb25kaXRpb25zOiBDb25kaXRpb25bXTtcbiAgc3RyaXBQYXJlbnM6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBjb25maWc6IERlZXBSZWFkb25seTxDb21wb3NpdGVDb25kaXRpb25Db25maWc+LFxuICAgIGJhc2VPYmplY3ROYW1lOiBzdHJpbmcsXG4gICAgc3RyaXBQYXJlbnM6IGJvb2xlYW4gPSBmYWxzZSxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm9wZXJhdG9yID0gY29uZmlnLm9wZXJhdG9yO1xuICAgIHRoaXMuY29uZGl0aW9ucyA9IGNvbmZpZy5jb25kaXRpb25zLm1hcCgoY29uZCkgPT5cbiAgICAgIGJ1aWxkQ29uZGl0aW9uKGNvbmQsIGJhc2VPYmplY3ROYW1lLCBmYWxzZSksXG4gICAgKTtcbiAgICB0aGlzLnN0cmlwUGFyZW5zID0gc3RyaXBQYXJlbnM7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICovXG4gIHRvU09RTCgpIHtcbiAgICBjb25zdCBjb25kaXRpb24gPSB0aGlzLmNvbmRpdGlvbnNcbiAgICAgIC5tYXAoKGMpID0+IGMudG9TT1FMKCkpXG4gICAgICAuam9pbihcIiBcIiArIHRoaXMub3BlcmF0b3IgKyBcIiBcIik7XG4gICAgcmV0dXJuIGNvbmRpdGlvbi5sZW5ndGggPiAwICYmICF0aGlzLnN0cmlwUGFyZW5zXG4gICAgICA/IFwiKFwiICsgY29uZGl0aW9uICsgXCIpXCJcbiAgICAgIDogY29uZGl0aW9uO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQSxJQUFBQSxXQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxlQUFBLEdBQUFGLHNCQUFBLENBQUFDLE9BQUE7QUFBOEMsU0FBQUQsdUJBQUFHLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQUFBLFNBQUFFLGdCQUFBQyxRQUFBLEVBQUFDLFdBQUEsVUFBQUQsUUFBQSxZQUFBQyxXQUFBLGVBQUFDLFNBQUE7QUFBQSxTQUFBQyxrQkFBQUMsTUFBQSxFQUFBQyxLQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBRCxLQUFBLENBQUFFLE1BQUEsRUFBQUQsQ0FBQSxVQUFBRSxVQUFBLEdBQUFILEtBQUEsQ0FBQUMsQ0FBQSxHQUFBRSxVQUFBLENBQUFDLFVBQUEsR0FBQUQsVUFBQSxDQUFBQyxVQUFBLFdBQUFELFVBQUEsQ0FBQUUsWUFBQSx3QkFBQUYsVUFBQSxFQUFBQSxVQUFBLENBQUFHLFFBQUEsU0FBQUMsTUFBQSxDQUFBQyxj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