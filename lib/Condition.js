"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _QueryElement2 = _interopRequireDefault(require("./QueryElement"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
/**
 *
 */
/**
 *
 */
/**
 *
 */
/**
 *
 */
/**
 *
 */
var Condition = exports["default"] = /*#__PURE__*/function (_QueryElement) {
  _inherits(Condition, _QueryElement);
  var _super = _createSuper(Condition);
  function Condition() {
    _classCallCheck(this, Condition);
    return _super.apply(this, arguments);
  }
  return _createClass(Condition);
}(_QueryElement2["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfUXVlcnlFbGVtZW50MiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIl90eXBlb2YiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwiX3NldFByb3RvdHlwZU9mIiwibyIsInAiLCJzZXRQcm90b3R5cGVPZiIsImJpbmQiLCJfX3Byb3RvX18iLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImFyZ3VtZW50cyIsImFwcGx5IiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiZ2V0UHJvdG90eXBlT2YiLCJDb25kaXRpb24iLCJleHBvcnRzIiwiX1F1ZXJ5RWxlbWVudCIsIl9zdXBlciIsIlF1ZXJ5RWxlbWVudCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9Db25kaXRpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1ZXJ5RWxlbWVudCBmcm9tIFwiLi9RdWVyeUVsZW1lbnRcIjtcbmltcG9ydCB0eXBlIHsgT3BlcmFuZENvbmZpZyB9IGZyb20gXCIuL09wZXJhbmRcIjtcbmltcG9ydCB0eXBlIHsgRmllbGRSZWZlcmVuY2VDb25maWcgfSBmcm9tIFwiLi9GaWVsZFwiO1xuXG4vKipcbiAqXG4gKi9cbmV4cG9ydCB0eXBlIENvbXBvc2l0ZUNvbmRpdGlvbkNvbmZpZyA9IHtcbiAgb3BlcmF0b3I6IFwiQU5EXCIgfCBcIk9SXCI7XG4gIGNvbmRpdGlvbnM6IENvbmRpdGlvbkNvbmZpZ1tdO1xufTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBOZWdhdGVDb25kaXRpb25Db25maWcgPSB7XG4gIG9wZXJhdG9yOiBcIk5PVFwiO1xuICBjb25kaXRpb246IENvbmRpdGlvbkNvbmZpZztcbn07XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IHR5cGUgU2luZ2xlQ29uZGl0aW9uQ29uZmlnID0ge1xuICBvcGVyYXRvcjpcbiAgICB8IFwiPVwiXG4gICAgfCBcIiE9XCJcbiAgICB8IFwiPFwiXG4gICAgfCBcIjw9XCJcbiAgICB8IFwiPj1cIlxuICAgIHwgXCI+XCJcbiAgICB8IFwiTElLRVwiXG4gICAgfCBcIklOXCJcbiAgICB8IFwiTk9UIElOXCJcbiAgICB8IFwiRVhDTFVERVNcIlxuICAgIHwgXCJJTkNMVURFU1wiO1xuICBmaWVsZDogRmllbGRSZWZlcmVuY2VDb25maWc7XG4gIHZhbHVlOiBPcGVyYW5kQ29uZmlnO1xufTtcblxuLyoqXG4gKlxuICovXG5leHBvcnQgdHlwZSBDb25kaXRpb25Db25maWcgPVxuICB8IENvbXBvc2l0ZUNvbmRpdGlvbkNvbmZpZ1xuICB8IE5lZ2F0ZUNvbmRpdGlvbkNvbmZpZ1xuICB8IFNpbmdsZUNvbmRpdGlvbkNvbmZpZztcblxuLyoqXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb25kaXRpb24gZXh0ZW5kcyBRdWVyeUVsZW1lbnQge31cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUEwQyxTQUFBRCx1QkFBQUUsR0FBQSxXQUFBQSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxHQUFBRCxHQUFBLGdCQUFBQSxHQUFBO0FBQUEsU0FBQUUsa0JBQUFDLE1BQUEsRUFBQUMsS0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQUQsS0FBQSxDQUFBRSxNQUFBLEVBQUFELENBQUEsVUFBQUUsVUFBQSxHQUFBSCxLQUFBLENBQUFDLENBQUEsR0FBQUUsVUFBQSxDQUFBQyxVQUFBLEdBQUFELFVBQUEsQ0FBQUMsVUFBQSxXQUFBRCxVQUFBLENBQUFFLFlBQUEsd0JBQUFGLFVBQUEsRUFBQUEsVUFBQSxDQUFBRyxRQUFBLFNBQUFDLE1BQUEsQ0FBQUMsY0FBQSxDQUFBVCxNQUFBLEVBQUFVLGNBQUEsQ0FBQU4sVUFBQSxDQUFBTyxHQUFBLEdBQUFQLFVBQUE7QUFBQSxTQUFBUSxhQUFBQyxXQUFBLEVBQUFDLFVBQUEsRUFBQUMsV0FBQSxRQUFBRCxVQUFBLEVBQUFmLGlCQUFBLENBQUFjLFdBQUEsQ0FBQUcsU0FBQSxFQUFBRixVQUFBLE9BQUFDLFdBQUEsRUFBQWhCLGlCQUFBLENBQUFjLFdBQUEsRUFBQUUsV0FBQSxHQUFBUCxNQUFBLENBQUFDLGNBQUEsQ0FBQUksV0FBQSxpQkFBQU4sUUFBQSxtQkFBQU0sV0FBQTtBQUFBLFNBQUFILGVBQUFPLEdBQUEsUUFBQU4sR0FBQSxHQUFBTyxZQUFBLENBQUFELEdBQUEsb0JBQUFFLE9BQUEsQ0FBQVIsR0FBQSxpQkFBQUEsR0FBQSxHQUFBUyxNQUFBLENBQUFULEdBQUE7QUFBQSxT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